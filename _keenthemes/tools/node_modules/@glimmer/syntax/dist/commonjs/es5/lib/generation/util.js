"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.escapeAttrValue = escapeAttrValue;
exports.escapeText = escapeText;
exports.isSynthetic = isSynthetic;
exports.sortByLoc = sortByLoc;
var ATTR_VALUE_REGEX_TEST = /[\xA0"&]/;
var ATTR_VALUE_REGEX_REPLACE = new RegExp(ATTR_VALUE_REGEX_TEST.source, 'g');
var TEXT_REGEX_TEST = /[\xA0&<>]/;
var TEXT_REGEX_REPLACE = new RegExp(TEXT_REGEX_TEST.source, 'g');

function attrValueReplacer(_char) {
  switch (_char.charCodeAt(0)) {
    case 160
    /* NBSP */
    :
      return '&nbsp;';

    case 34
    /* QUOT */
    :
      return '&quot;';

    case 38
    /* AMP */
    :
      return '&amp;';

    default:
      return _char;
  }
}

function textReplacer(_char2) {
  switch (_char2.charCodeAt(0)) {
    case 160
    /* NBSP */
    :
      return '&nbsp;';

    case 38
    /* AMP */
    :
      return '&amp;';

    case 60
    /* LT */
    :
      return '&lt;';

    case 62
    /* GT */
    :
      return '&gt;';

    default:
      return _char2;
  }
}

function escapeAttrValue(attrValue) {
  if (ATTR_VALUE_REGEX_TEST.test(attrValue)) {
    return attrValue.replace(ATTR_VALUE_REGEX_REPLACE, attrValueReplacer);
  }

  return attrValue;
}

function escapeText(text) {
  if (TEXT_REGEX_TEST.test(text)) {
    return text.replace(TEXT_REGEX_REPLACE, textReplacer);
  }

  return text;
}

function isSynthetic(node) {
  if (node && node.loc) {
    return node.loc.source === '(synthetic)';
  }

  return false;
}

function sortByLoc(a, b) {
  // be conservative about the location where a new node is inserted
  if (isSynthetic(a) || isSynthetic(b)) {
    return 0;
  }

  if (a.loc.start.line < b.loc.start.line) {
    return -1;
  }

  if (a.loc.start.line === b.loc.start.line && a.loc.start.column < b.loc.start.column) {
    return -1;
  }

  if (a.loc.start.line === b.loc.start.line && a.loc.start.column === b.loc.start.column) {
    return 0;
  }

  return 1;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3N5bnRheC9saWIvZ2VuZXJhdGlvbi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQVVBLElBQU0scUJBQXFCLEdBQTNCLFVBQUE7QUFDQSxJQUFNLHdCQUF3QixHQUFHLElBQUEsTUFBQSxDQUFXLHFCQUFxQixDQUFoQyxNQUFBLEVBQWpDLEdBQWlDLENBQWpDO0FBRUEsSUFBTSxlQUFlLEdBQXJCLFdBQUE7QUFDQSxJQUFNLGtCQUFrQixHQUFHLElBQUEsTUFBQSxDQUFXLGVBQWUsQ0FBMUIsTUFBQSxFQUEzQixHQUEyQixDQUEzQjs7QUFFQSxTQUFBLGlCQUFBLENBQUEsS0FBQSxFQUF1QztBQUNyQyxVQUFRLEtBQUksQ0FBSixVQUFBLENBQVIsQ0FBUSxDQUFSO0FBQ0UsU0FBQTtBQUFBO0FBQUE7QUFDRSxhQUFBLFFBQUE7O0FBQ0YsU0FBQTtBQUFBO0FBQUE7QUFDRSxhQUFBLFFBQUE7O0FBQ0YsU0FBQTtBQUFBO0FBQUE7QUFDRSxhQUFBLE9BQUE7O0FBQ0Y7QUFDRSxhQUFBLEtBQUE7QUFSSjtBQVVEOztBQUVELFNBQUEsWUFBQSxDQUFBLE1BQUEsRUFBa0M7QUFDaEMsVUFBUSxNQUFJLENBQUosVUFBQSxDQUFSLENBQVEsQ0FBUjtBQUNFLFNBQUE7QUFBQTtBQUFBO0FBQ0UsYUFBQSxRQUFBOztBQUNGLFNBQUE7QUFBQTtBQUFBO0FBQ0UsYUFBQSxPQUFBOztBQUNGLFNBQUE7QUFBQTtBQUFBO0FBQ0UsYUFBQSxNQUFBOztBQUNGLFNBQUE7QUFBQTtBQUFBO0FBQ0UsYUFBQSxNQUFBOztBQUNGO0FBQ0UsYUFBQSxNQUFBO0FBVko7QUFZRDs7QUFFSyxTQUFBLGVBQUEsQ0FBQSxTQUFBLEVBQTJDO0FBQy9DLE1BQUkscUJBQXFCLENBQXJCLElBQUEsQ0FBSixTQUFJLENBQUosRUFBMkM7QUFDekMsV0FBTyxTQUFTLENBQVQsT0FBQSxDQUFBLHdCQUFBLEVBQVAsaUJBQU8sQ0FBUDtBQUNEOztBQUNELFNBQUEsU0FBQTtBQUNEOztBQUVLLFNBQUEsVUFBQSxDQUFBLElBQUEsRUFBaUM7QUFDckMsTUFBSSxlQUFlLENBQWYsSUFBQSxDQUFKLElBQUksQ0FBSixFQUFnQztBQUM5QixXQUFPLElBQUksQ0FBSixPQUFBLENBQUEsa0JBQUEsRUFBUCxZQUFPLENBQVA7QUFDRDs7QUFDRCxTQUFBLElBQUE7QUFDRDs7QUFFSyxTQUFBLFdBQUEsQ0FBQSxJQUFBLEVBQW9DO0FBQ3hDLE1BQUksSUFBSSxJQUFJLElBQUksQ0FBaEIsR0FBQSxFQUFzQjtBQUNwQixXQUFPLElBQUksQ0FBSixHQUFBLENBQUEsTUFBQSxLQUFQLGFBQUE7QUFDRDs7QUFFRCxTQUFBLEtBQUE7QUFDRDs7QUFFSyxTQUFBLFNBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUE0QztBQUNoRDtBQUNBLE1BQUksV0FBVyxDQUFYLENBQVcsQ0FBWCxJQUFrQixXQUFXLENBQWpDLENBQWlDLENBQWpDLEVBQXNDO0FBQ3BDLFdBQUEsQ0FBQTtBQUNEOztBQUVELE1BQUksQ0FBQyxDQUFELEdBQUEsQ0FBQSxLQUFBLENBQUEsSUFBQSxHQUFtQixDQUFDLENBQUQsR0FBQSxDQUFBLEtBQUEsQ0FBdkIsSUFBQSxFQUF5QztBQUN2QyxXQUFPLENBQVAsQ0FBQTtBQUNEOztBQUVELE1BQUksQ0FBQyxDQUFELEdBQUEsQ0FBQSxLQUFBLENBQUEsSUFBQSxLQUFxQixDQUFDLENBQUQsR0FBQSxDQUFBLEtBQUEsQ0FBckIsSUFBQSxJQUF5QyxDQUFDLENBQUQsR0FBQSxDQUFBLEtBQUEsQ0FBQSxNQUFBLEdBQXFCLENBQUMsQ0FBRCxHQUFBLENBQUEsS0FBQSxDQUFsRSxNQUFBLEVBQXNGO0FBQ3BGLFdBQU8sQ0FBUCxDQUFBO0FBQ0Q7O0FBRUQsTUFBSSxDQUFDLENBQUQsR0FBQSxDQUFBLEtBQUEsQ0FBQSxJQUFBLEtBQXFCLENBQUMsQ0FBRCxHQUFBLENBQUEsS0FBQSxDQUFyQixJQUFBLElBQXlDLENBQUMsQ0FBRCxHQUFBLENBQUEsS0FBQSxDQUFBLE1BQUEsS0FBdUIsQ0FBQyxDQUFELEdBQUEsQ0FBQSxLQUFBLENBQXBFLE1BQUEsRUFBd0Y7QUFDdEYsV0FBQSxDQUFBO0FBQ0Q7O0FBRUQsU0FBQSxDQUFBO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBBU1QgZnJvbSAnLi4vdHlwZXMvbm9kZXMnO1xuXG5jb25zdCBlbnVtIENoYXIge1xuICBOQlNQID0gMHhhMCxcbiAgUVVPVCA9IDB4MjIsXG4gIExUID0gMHgzYyxcbiAgR1QgPSAweDNlLFxuICBBTVAgPSAweDI2LFxufVxuXG5jb25zdCBBVFRSX1ZBTFVFX1JFR0VYX1RFU1QgPSAvW1xceEEwXCImXS87XG5jb25zdCBBVFRSX1ZBTFVFX1JFR0VYX1JFUExBQ0UgPSBuZXcgUmVnRXhwKEFUVFJfVkFMVUVfUkVHRVhfVEVTVC5zb3VyY2UsICdnJyk7XG5cbmNvbnN0IFRFWFRfUkVHRVhfVEVTVCA9IC9bXFx4QTAmPD5dLztcbmNvbnN0IFRFWFRfUkVHRVhfUkVQTEFDRSA9IG5ldyBSZWdFeHAoVEVYVF9SRUdFWF9URVNULnNvdXJjZSwgJ2cnKTtcblxuZnVuY3Rpb24gYXR0clZhbHVlUmVwbGFjZXIoY2hhcjogc3RyaW5nKSB7XG4gIHN3aXRjaCAoY2hhci5jaGFyQ29kZUF0KDApKSB7XG4gICAgY2FzZSBDaGFyLk5CU1A6XG4gICAgICByZXR1cm4gJyZuYnNwOyc7XG4gICAgY2FzZSBDaGFyLlFVT1Q6XG4gICAgICByZXR1cm4gJyZxdW90Oyc7XG4gICAgY2FzZSBDaGFyLkFNUDpcbiAgICAgIHJldHVybiAnJmFtcDsnO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gY2hhcjtcbiAgfVxufVxuXG5mdW5jdGlvbiB0ZXh0UmVwbGFjZXIoY2hhcjogc3RyaW5nKSB7XG4gIHN3aXRjaCAoY2hhci5jaGFyQ29kZUF0KDApKSB7XG4gICAgY2FzZSBDaGFyLk5CU1A6XG4gICAgICByZXR1cm4gJyZuYnNwOyc7XG4gICAgY2FzZSBDaGFyLkFNUDpcbiAgICAgIHJldHVybiAnJmFtcDsnO1xuICAgIGNhc2UgQ2hhci5MVDpcbiAgICAgIHJldHVybiAnJmx0Oyc7XG4gICAgY2FzZSBDaGFyLkdUOlxuICAgICAgcmV0dXJuICcmZ3Q7JztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGNoYXI7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwZUF0dHJWYWx1ZShhdHRyVmFsdWU6IHN0cmluZykge1xuICBpZiAoQVRUUl9WQUxVRV9SRUdFWF9URVNULnRlc3QoYXR0clZhbHVlKSkge1xuICAgIHJldHVybiBhdHRyVmFsdWUucmVwbGFjZShBVFRSX1ZBTFVFX1JFR0VYX1JFUExBQ0UsIGF0dHJWYWx1ZVJlcGxhY2VyKTtcbiAgfVxuICByZXR1cm4gYXR0clZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlVGV4dCh0ZXh0OiBzdHJpbmcpIHtcbiAgaWYgKFRFWFRfUkVHRVhfVEVTVC50ZXN0KHRleHQpKSB7XG4gICAgcmV0dXJuIHRleHQucmVwbGFjZShURVhUX1JFR0VYX1JFUExBQ0UsIHRleHRSZXBsYWNlcik7XG4gIH1cbiAgcmV0dXJuIHRleHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1N5bnRoZXRpYyhub2RlOiBBU1QuTm9kZSk6IGJvb2xlYW4ge1xuICBpZiAobm9kZSAmJiBub2RlLmxvYykge1xuICAgIHJldHVybiBub2RlLmxvYy5zb3VyY2UgPT09ICcoc3ludGhldGljKSc7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzb3J0QnlMb2MoYTogQVNULk5vZGUsIGI6IEFTVC5Ob2RlKTogLTEgfCAwIHwgMSB7XG4gIC8vIGJlIGNvbnNlcnZhdGl2ZSBhYm91dCB0aGUgbG9jYXRpb24gd2hlcmUgYSBuZXcgbm9kZSBpcyBpbnNlcnRlZFxuICBpZiAoaXNTeW50aGV0aWMoYSkgfHwgaXNTeW50aGV0aWMoYikpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGlmIChhLmxvYy5zdGFydC5saW5lIDwgYi5sb2Muc3RhcnQubGluZSkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIGlmIChhLmxvYy5zdGFydC5saW5lID09PSBiLmxvYy5zdGFydC5saW5lICYmIGEubG9jLnN0YXJ0LmNvbHVtbiA8IGIubG9jLnN0YXJ0LmNvbHVtbikge1xuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIGlmIChhLmxvYy5zdGFydC5saW5lID09PSBiLmxvYy5zdGFydC5saW5lICYmIGEubG9jLnN0YXJ0LmNvbHVtbiA9PT0gYi5sb2Muc3RhcnQuY29sdW1uKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICByZXR1cm4gMTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=